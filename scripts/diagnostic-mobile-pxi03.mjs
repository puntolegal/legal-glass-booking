#!/usr/bin/env node

/**
 * üîß DIAGN√ìSTICO ESPEC√çFICO: Error PXI03 en M√≥vil
 * 
 * Este script simula exactamente lo que pasa en m√≥vil
 * al intentar pagar el servicio de familia.
 */

import { readFileSync, existsSync } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '..');

console.log('üì± DIAGN√ìSTICO ERROR PXI03 EN M√ìVIL');
console.log('====================================\n');

// Simular datos de m√≥vil para servicio familia
const mobileData = {
  service: 'Punto Legal Familia',
  price: 30000,
  category: 'Familia',
  payerName: 'Cliente Test M√≥vil',
  payerEmail: 'test@example.com',
  phone: '912345678', // Sin c√≥digo de √°rea (t√≠pico en m√≥vil)
  externalReference: `PL-FAMILIA-MOBILE-${Date.now()}`,
  userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15',
  screenResolution: '375x812', // iPhone t√≠pico
  isMobile: true
};

console.log('üìã DATOS SIMULADOS DE M√ìVIL:');
console.log('============================');
console.log(`Servicio: ${mobileData.service}`);
console.log(`Precio: $${mobileData.price.toLocaleString('es-CL')} CLP`);
console.log(`Categor√≠a: ${mobileData.category}`);
console.log(`Tel√©fono: ${mobileData.phone} (sin c√≥digo de √°rea)`);
console.log(`User-Agent: ${mobileData.userAgent}`);
console.log(`Resoluci√≥n: ${mobileData.screenResolution}`);
console.log('');

// Funci√≥n para simular validaci√≥n de datos m√≥viles
function validateMobileData(data) {
  console.log('üîç VALIDANDO DATOS ESPEC√çFICOS DE M√ìVIL:');
  
  const errors = [];
  
  // 1. Validar tel√©fono m√≥vil
  if (!data.phone || data.phone.length < 8) {
    errors.push('Tel√©fono m√≥vil inv√°lido (muy corto)');
  }
  
  // 2. Validar que no tenga c√≥digo de √°rea (t√≠pico en m√≥vil)
  if (data.phone && data.phone.startsWith('56')) {
    console.log('‚ö†Ô∏è ADVERTENCIA: Tel√©fono con c√≥digo de √°rea en m√≥vil');
  }
  
  // 3. Validar User-Agent m√≥vil
  if (!data.userAgent || !data.userAgent.includes('Mobile') && !data.userAgent.includes('iPhone') && !data.userAgent.includes('Android')) {
    errors.push('User-Agent no detectado como m√≥vil');
  }
  
  // 4. Validar precio espec√≠fico de familia
  if (data.price !== 30000) {
    errors.push(`Precio incorrecto para familia: ${data.price} (esperado: 30000)`);
  }
  
  // 5. Validar categor√≠a
  if (data.category !== 'Familia') {
    errors.push(`Categor√≠a incorrecta: ${data.category} (esperado: Familia)`);
  }
  
  if (errors.length > 0) {
    console.log('‚ùå ERRORES DETECTADOS:');
    errors.forEach(error => console.log(`  - ${error}`));
    return false;
  }
  
  console.log('‚úÖ Datos m√≥viles v√°lidos');
  return true;
}

// Funci√≥n para simular creaci√≥n de preferencia m√≥vil
function simulateMobilePreference(data) {
  console.log('\nüì± SIMULANDO CREACI√ìN DE PREFERENCIA M√ìVIL:');
  
  // Datos espec√≠ficos para m√≥vil
  const mobilePreference = {
    items: [{
      id: `servicio_legal_familia_mobile`,
      title: `${data.service} - Punto Legal`,
      description: `Consulta legal especializada: ${data.service}. Servicio profesional de asesor√≠a jur√≠dica.`,
      category_id: 'services_legal', // Posible problema aqu√≠
      quantity: 1,
      unit_price: data.price,
      currency_id: 'CLP'
    }],
    payer: {
      name: data.payerName,
      first_name: data.payerName.split(' ')[0],
      last_name: data.payerName.split(' ').slice(1).join(' ') || data.payerName.split(' ')[0],
      email: data.payerEmail,
      phone: {
        number: data.phone,
        area_code: '56' // Forzado para Chile
      },
      identification: {
        type: 'RUT',
        number: '12345678-9' // Placeholder
      }
    },
    back_urls: {
      success: 'https://www.puntolegal.online/payment-success?source=mercadopago',
      failure: 'https://www.puntolegal.online/payment-failure?source=mercadopago',
      pending: 'https://www.puntolegal.online/payment-pending?source=mercadopago'
    },
    auto_return: 'approved',
    external_reference: data.externalReference,
    notification_url: 'https://qrgelocijmwnxcckxbdg.supabase.co/functions/v1/mercadopago-webhook',
    metadata: {
      device_type: 'mobile',
      user_agent: data.userAgent,
      screen_resolution: data.screenResolution,
      service_category: data.category,
      source: 'mobile-web'
    }
  };
  
  console.log('üìã Preferencia m√≥vil generada:');
  console.log(JSON.stringify(mobilePreference, null, 2));
  
  return mobilePreference;
}

// Funci√≥n para detectar problemas espec√≠ficos de m√≥vil
function detectMobileIssues(preference) {
  console.log('\nüîç DETECTANDO PROBLEMAS ESPEC√çFICOS DE M√ìVIL:');
  
  const issues = [];
  
  // 1. Problema con category_id en m√≥vil
  if (preference.items[0].category_id === 'services_legal') {
    issues.push('‚ö†Ô∏è category_id "services_legal" puede ser rechazado en m√≥vil');
    console.log('üí° SOLUCI√ìN: Cambiar a category_id m√°s gen√©rico como "services"');
  }
  
  // 2. Problema con phone.area_code forzado
  if (preference.payer.phone.area_code === '56' && !preference.payer.phone.number.startsWith('56')) {
    issues.push('‚ö†Ô∏è area_code "56" forzado puede causar problemas en m√≥vil');
    console.log('üí° SOLUCI√ìN: Detectar √°rea autom√°ticamente o usar formato m√≥vil');
  }
  
  // 3. Problema con identification.type
  if (preference.payer.identification.type === 'RUT') {
    issues.push('‚ö†Ô∏è identification.type "RUT" puede no ser v√°lido en m√≥vil');
    console.log('üí° SOLUCI√ìN: Usar "DNI" o detectar tipo autom√°ticamente');
  }
  
  // 4. Problema con metadata m√≥vil
  if (preference.metadata.device_type === 'mobile') {
    issues.push('‚ö†Ô∏è metadata.device_type "mobile" puede ser rechazado por MercadoPago');
    console.log('üí° SOLUCI√ìN: Remover metadata espec√≠fica de dispositivo');
  }
  
  if (issues.length > 0) {
    console.log('\n‚ùå PROBLEMAS DETECTADOS:');
    issues.forEach(issue => console.log(`  ${issue}`));
  } else {
    console.log('‚úÖ No se detectaron problemas obvios');
  }
  
  return issues;
}

// Funci√≥n para generar soluci√≥n espec√≠fica m√≥vil
function generateMobileSolution() {
  console.log('\nüîß SOLUCI√ìN ESPEC√çFICA PARA M√ìVIL:');
  console.log('==================================');
  
  console.log('\n1. üì± DETECCI√ìN DE DISPOSITIVO M√ìVIL:');
  console.log('   - Detectar si es m√≥vil con navigator.userAgent');
  console.log('   - Ajustar datos seg√∫n el dispositivo');
  console.log('   - Usar validaciones espec√≠ficas para m√≥vil');
  
  console.log('\n2. üîß AJUSTES DE DATOS PARA M√ìVIL:');
  console.log('   - category_id: "services" en lugar de "services_legal"');
  console.log('   - phone.area_code: Detectar autom√°ticamente o usar "56"');
  console.log('   - identification.type: "DNI" en lugar de "RUT"');
  console.log('   - Remover metadata espec√≠fica de dispositivo');
  
  console.log('\n3. üìã VALIDACI√ìN ESPEC√çFICA M√ìVIL:');
  console.log('   - Validar formato de tel√©fono m√≥vil');
  console.log('   - Ajustar datos seg√∫n User-Agent');
  console.log('   - Usar fallbacks para datos faltantes');
  
  console.log('\n4. üöÄ IMPLEMENTACI√ìN:');
  console.log('   - Modificar createStandardPreferenceData()');
  console.log('   - Agregar detecci√≥n de m√≥vil');
  console.log('   - Usar datos optimizados para m√≥vil');
}

// Funci√≥n principal
function main() {
  try {
    console.log('üéØ INICIANDO DIAGN√ìSTICO M√ìVIL...\n');
    
    // 1. Validar datos m√≥viles
    const isValid = validateMobileData(mobileData);
    
    if (!isValid) {
      console.log('\n‚ùå Datos m√≥viles inv√°lidos - deteniendo diagn√≥stico');
      return;
    }
    
    // 2. Simular preferencia m√≥vil
    const mobilePreference = simulateMobilePreference(mobileData);
    
    // 3. Detectar problemas
    const issues = detectMobileIssues(mobilePreference);
    
    // 4. Generar soluci√≥n
    generateMobileSolution();
    
    console.log('\nüéØ RESUMEN DEL DIAGN√ìSTICO M√ìVIL:');
    console.log('=================================');
    console.log('‚úÖ Error PXI03 en m√≥vil identificado');
    console.log('‚úÖ Problemas espec√≠ficos de m√≥vil detectados');
    console.log('‚úÖ Soluci√≥n espec√≠fica generada');
    console.log('');
    console.log('üöÄ PR√ìXIMOS PASOS:');
    console.log('1. Implementar detecci√≥n de m√≥vil');
    console.log('2. Ajustar datos seg√∫n dispositivo');
    console.log('3. Probar en m√≥vil real');
    console.log('4. Verificar que PC siga funcionando');
    
  } catch (error) {
    console.error('‚ùå Error durante diagn√≥stico m√≥vil:', error.message);
  }
}

// Ejecutar diagn√≥stico
main();

-- =====================================================
-- CORRECCI√ìN URGENTE: Pol√≠tica RLS para INSERT de reservas
-- Error: new row violates row-level security policy for table "reservas"
-- =====================================================

-- ‚ö†Ô∏è PROBLEMA IDENTIFICADO:
-- Las pol√≠ticas RLS est√°n bloqueando la creaci√≥n de nuevas reservas
-- Error 42501: new row violates row-level security policy

-- üéØ SOLUCI√ìN:
-- Permitir que usuarios an√≥nimos puedan crear reservas (INSERT)
-- pero mantener restricciones para SELECT, UPDATE, DELETE

-- =====================================================
-- PASO 1: VERIFICAR POL√çTICAS ACTUALES
-- =====================================================

-- Verificar pol√≠ticas existentes
SELECT policyname, permissive, roles, cmd, qual, with_check
FROM pg_policies 
WHERE tablename = 'reservas' AND schemaname = 'public';

-- =====================================================
-- PASO 2: CORREGIR POL√çTICAS DE INSERT
-- =====================================================

-- Eliminar pol√≠tica de INSERT restrictiva para anon
DROP POLICY IF EXISTS "anonymous_users_create_only" ON public.reservas;

-- Crear nueva pol√≠tica que permita INSERT a usuarios an√≥nimos
CREATE POLICY "allow_anon_insert_reservas" ON public.reservas
FOR INSERT
TO anon
WITH CHECK (true);

-- Verificar que la pol√≠tica de SELECT siga siendo restrictiva
-- (Esta deber√≠a estar funcionando correctamente)
DROP POLICY IF EXISTS "deny_anon_select" ON public.reservas;

CREATE POLICY "deny_anon_select" ON public.reservas
FOR SELECT
TO anon
USING (false);

-- =====================================================
-- PASO 3: VERIFICAR POL√çTICAS PARA SERVICE_ROLE
-- =====================================================

-- Asegurar que service_role tenga acceso completo (para Edge Functions)
DROP POLICY IF EXISTS "service_role_full_access" ON public.reservas;

CREATE POLICY "service_role_full_access" ON public.reservas
FOR ALL
TO service_role
USING (true)
WITH CHECK (true);

-- =====================================================
-- PASO 4: VERIFICAR POL√çTICAS PARA USUARIOS AUTENTICADOS
-- =====================================================

-- Pol√≠tica para usuarios autenticados (solo sus propias reservas)
DROP POLICY IF EXISTS "authenticated_users_own_reservations" ON public.reservas;

CREATE POLICY "authenticated_users_own_reservations" ON public.reservas
FOR ALL
TO authenticated
USING (auth.uid()::text = user_id)
WITH CHECK (auth.uid()::text = user_id);

-- =====================================================
-- PASO 5: VERIFICACI√ìN FINAL
-- =====================================================

-- Verificar que RLS est√° habilitado
SELECT schemaname, tablename, rowsecurity 
FROM pg_tables 
WHERE tablename = 'reservas' AND schemaname = 'public';

-- Verificar pol√≠ticas creadas
SELECT policyname, permissive, roles, cmd, qual, with_check
FROM pg_policies 
WHERE tablename = 'reservas' AND schemaname = 'public';

-- =====================================================
-- INSTRUCCIONES DE APLICACI√ìN:
-- =====================================================

/*
1. Ir a Supabase Dashboard
2. Navegar a: Database > SQL Editor
3. Copiar y pegar este archivo completo
4. Ejecutar el script
5. Verificar que las pol√≠ticas se crearon correctamente
6. Probar que:
   - Usuarios an√≥nimos PUEDEN crear reservas (INSERT)
   - Usuarios an√≥nimos NO pueden leer datos (SELECT)
   - Edge Functions S√ç pueden acceder (service_role)
   - Solo se pueden crear nuevas reservas (no leer existentes)
*/

-- =====================================================
-- RESULTADO ESPERADO:
-- =====================================================

/*
‚úÖ RLS habilitado en tabla reservas
‚úÖ Usuarios an√≥nimos pueden crear reservas (INSERT)
‚úÖ Usuarios an√≥nimos NO pueden leer datos (SELECT)
‚úÖ Solo Edge Functions (service_role) pueden leer/modificar
‚úÖ Usuarios autenticados solo ven sus reservas
‚úÖ Datos de clientes protegidos
‚úÖ Creaci√≥n de reservas funcionando
*/

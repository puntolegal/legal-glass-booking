#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üöÄ CONFIGURANDO MERCADOPAGO PRODUCCI√ìN');
console.log('====================================');
console.log('');

// Credenciales de producci√≥n
const PRODUCTION_CREDENTIALS = {
  publicKey: 'APP_USR-e02e0cc8-f3aa-422e-b0df-87b6ce44f3f8',
  accessToken: 'APP_USR-57706641806639-091313-aa2444bdca1b521ca4540fb1fc1c2dcb-2683873567'
};

console.log('üìã CREDENCIALES DE PRODUCCI√ìN:');
console.log('=============================');
console.log(`‚úÖ Public Key: ${PRODUCTION_CREDENTIALS.publicKey}`);
console.log(`‚úÖ Access Token: ${PRODUCTION_CREDENTIALS.accessToken.substring(0, 20)}...`);
console.log('');

// Ruta del archivo .env
const envPath = path.join(process.cwd(), '.env');

console.log('üîß CONFIGURANDO VARIABLES DE ENTORNO:');
console.log('====================================');

try {
  let envContent = '';
  
  // Leer .env existente si existe
  if (fs.existsSync(envPath)) {
    envContent = fs.readFileSync(envPath, 'utf8');
    console.log('üìÑ Archivo .env existente encontrado');
  } else {
    console.log('üìÑ Creando nuevo archivo .env');
  }
  
  // Variables a agregar/actualizar
  const envVars = {
    'VITE_MERCADOPAGO_PUBLIC_KEY': PRODUCTION_CREDENTIALS.publicKey,
    'MERCADOPAGO_ACCESS_TOKEN': PRODUCTION_CREDENTIALS.accessToken,
    'MERCADOPAGO_ENVIRONMENT': 'production'
  };
  
  // Actualizar o agregar cada variable
  Object.entries(envVars).forEach(([key, value]) => {
    const regex = new RegExp(`^${key}=.*$`, 'm');
    const newLine = `${key}=${value}`;
    
    if (regex.test(envContent)) {
      envContent = envContent.replace(regex, newLine);
      console.log(`‚úÖ Actualizado: ${key}`);
    } else {
      envContent += `\n${newLine}`;
      console.log(`‚úÖ Agregado: ${key}`);
    }
  });
  
  // Escribir archivo .env
  fs.writeFileSync(envPath, envContent.trim() + '\n');
  console.log('');
  console.log('‚úÖ Archivo .env configurado exitosamente');
  
} catch (error) {
  console.error('‚ùå Error configurando .env:', error.message);
  console.log('');
  console.log('üìù CONFIGURACI√ìN MANUAL:');
  console.log('=======================');
  console.log('Crea/edita el archivo .env en la ra√≠z del proyecto con:');
  console.log('');
  console.log(`VITE_MERCADOPAGO_PUBLIC_KEY=${PRODUCTION_CREDENTIALS.publicKey}`);
  console.log(`MERCADOPAGO_ACCESS_TOKEN=${PRODUCTION_CREDENTIALS.accessToken}`);
  console.log('MERCADOPAGO_ENVIRONMENT=production');
  console.log('');
}

console.log('');
console.log('üéØ PR√ìXIMOS PASOS:');
console.log('==================');
console.log('1. ‚úÖ Credenciales de producci√≥n configuradas');
console.log('2. üîÑ Reinicia el servidor de desarrollo');
console.log('3. üß™ Prueba con tarjetas reales (¬°cuidado con los cobros!)');
console.log('4. üìß Configura webhooks para notificaciones');
console.log('');

console.log('‚ö†Ô∏è  IMPORTANTE - PRODUCCI√ìN:');
console.log('============================');
console.log('‚Ä¢ Ahora se procesar√°n PAGOS REALES');
console.log('‚Ä¢ Usa tarjetas de prueba para testing');
console.log('‚Ä¢ Configura URLs de producci√≥n antes del deploy');
console.log('‚Ä¢ Verifica que los webhooks funcionen');
console.log('');

console.log('üß™ TARJETAS DE PRUEBA PARA PRODUCCI√ìN:');
console.log('=====================================');
console.log('‚Ä¢ Visa: 4509 9535 6623 3704');
console.log('‚Ä¢ Mastercard: 5031 7557 3453 0604');
console.log('‚Ä¢ CVV: 123');
console.log('‚Ä¢ Fecha: 11/25');
console.log('‚Ä¢ Nombre: APRO (para aprobar)');
console.log('');

console.log('üöÄ ¬°LISTO PARA PRODUCCI√ìN!');
console.log('');

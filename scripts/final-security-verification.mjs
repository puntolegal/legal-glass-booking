#!/usr/bin/env node

console.log('üîç Verificaci√≥n final de seguridad RLS...\n');

const SUPABASE_URL = 'https://qrgelocijmwnxcckxbdg.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFyZ2Vsb2Npam13bnhjY2t4YmRnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc4MDI0MjksImV4cCI6MjA3MzM3ODQyOX0.0q_3bb8bKR8VVZZAK_hYvhvLSTaU1ioQzmO5fKALjbI';

async function testSecurityScenarios() {
  console.log('üîí Probando escenarios de seguridad...\n');
  
  const scenarios = [
    {
      name: 'Acceso sin autenticaci√≥n (deber√≠a fallar)',
      headers: {},
      expectedStatus: [401, 403],
      shouldHaveData: false
    },
    {
      name: 'Acceso con anon key (deber√≠a estar restringido)',
      headers: {
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'apikey': SUPABASE_ANON_KEY
      },
      expectedStatus: [200],
      shouldHaveData: false // No deber√≠a ver datos sensibles
    },
    {
      name: 'Creaci√≥n de reserva (deber√≠a funcionar)',
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'apikey': SUPABASE_ANON_KEY,
        'Content-Type': 'application/json'
      },
      body: {
        nombre: 'Test Security Final',
        email: 'test@security-final.com',
        telefono: '+56912345678',
        rut: '12345678-9',
        servicio: 'Test Service Final',
        precio: '1000',
        fecha: '2025-01-30',
        hora: '10:00',
        tipo_reunion: 'online',
        descripcion: 'Test final de seguridad',
        estado: 'pendiente',
        user_id: 'security_test_final'
      },
      expectedStatus: [201],
      shouldHaveData: true
    }
  ];

  let allTestsPassed = true;

  for (const scenario of scenarios) {
    console.log(`üìã ${scenario.name}...`);
    
    try {
      const options = {
        method: scenario.method || 'GET',
        headers: scenario.headers
      };
      
      if (scenario.body) {
        options.body = JSON.stringify(scenario.body);
      }
      
      const url = scenario.method === 'POST' 
        ? `${SUPABASE_URL}/rest/v1/reservas`
        : `${SUPABASE_URL}/rest/v1/reservas?limit=5`;
      
      const response = await fetch(url, options);
      const status = response.status;
      
      console.log(`   Status: ${status}`);
      
      // Verificar si el status es el esperado
      const statusExpected = scenario.expectedStatus.includes(status);
      console.log(`   Status esperado: ${statusExpected ? '‚úÖ' : '‚ùå'}`);
      
      if (response.ok && scenario.shouldHaveData !== undefined) {
        const data = await response.json();
        const hasData = Array.isArray(data) ? data.length > 0 : !!data;
        
        if (scenario.shouldHaveData === hasData) {
          console.log(`   Datos: ${hasData ? '‚úÖ Presentes' : '‚úÖ Sin datos (protegido)'}`);
        } else {
          console.log(`   Datos: ‚ùå ${hasData ? 'Inesperadamente presentes' : 'Faltan datos esperados'}`);
          allTestsPassed = false;
        }
      }
      
      if (!statusExpected) {
        allTestsPassed = false;
      }
      
    } catch (error) {
      console.log(`   Error: ‚ùå ${error.message}`);
      allTestsPassed = false;
    }
    
    console.log('');
  }
  
  return allTestsPassed;
}

async function testEdgeFunctionAccess() {
  console.log('üîç Probando acceso de Edge Functions...\n');
  
  try {
    // Simular acceso como Edge Function
    const response = await fetch(`${SUPABASE_URL}/rest/v1/reservas?limit=1`, {
      headers: {
        'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
        'apikey': SUPABASE_ANON_KEY,
        'Content-Type': 'application/json'
      }
    });

    console.log(`üìä Status: ${response.status}`);
    
    if (response.status === 200) {
      const data = await response.json();
      console.log(`üìä Datos accesibles: ${data.length} registros`);
      
      if (data.length === 0) {
        console.log('‚úÖ Edge Functions pueden acceder pero datos est√°n protegidos por RLS');
        return true;
      } else {
        console.log('‚ö†Ô∏è Edge Functions pueden ver datos - verificar pol√≠ticas');
        return false;
      }
    } else {
      console.log('‚ùå Edge Functions no pueden acceder');
      return false;
    }
  } catch (error) {
    console.log(`‚ùå Error verificando Edge Functions: ${error.message}`);
    return false;
  }
}

async function main() {
  console.log('üöÄ Iniciando verificaci√≥n final de seguridad...\n');
  
  // 1. Probar escenarios de seguridad
  const securityTestsPassed = await testSecurityScenarios();
  
  // 2. Verificar acceso de Edge Functions
  const edgeFunctionsWorking = await testEdgeFunctionAccess();
  
  console.log('\nüìä RESUMEN FINAL DE SEGURIDAD:');
  console.log('‚ïê'.repeat(60));
  
  if (securityTestsPassed && edgeFunctionsWorking) {
    console.log('üéâ ¬°SEGURIDAD CORREGIDA EXITOSAMENTE!');
    console.log('');
    console.log('‚úÖ ACCESO SIN AUTENTICACI√ìN DENEGADO');
    console.log('‚úÖ DATOS SENSIBLES PROTEGIDOS');
    console.log('‚úÖ CREACI√ìN DE RESERVAS FUNCIONANDO');
    console.log('‚úÖ EDGE FUNCTIONS OPERATIVAS');
    console.log('');
    console.log('üîí MEDIDAS DE SEGURIDAD ACTIVAS:');
    console.log('‚Ä¢ RLS habilitado en tabla reservas');
    console.log('‚Ä¢ Pol√≠ticas de acceso implementadas');
    console.log('‚Ä¢ Datos de clientes protegidos');
    console.log('‚Ä¢ Solo operaciones autorizadas permitidas');
    console.log('');
    console.log('‚ú® El sistema est√° seguro y operativo');
    
  } else {
    console.log('‚ùå A√öN HAY PROBLEMAS DE SEGURIDAD');
    console.log('');
    if (!securityTestsPassed) {
      console.log('‚ùå Tests de seguridad fallaron');
    }
    if (!edgeFunctionsWorking) {
      console.log('‚ùå Edge Functions tienen problemas');
    }
    console.log('');
    console.log('üí° Se requiere revisi√≥n adicional de las pol√≠ticas RLS');
  }
  
  console.log('\n‚ú® Verificaci√≥n final completada');
}

main().catch(console.error);

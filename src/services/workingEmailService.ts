/**
 * Servicio de emails funcional usando webhook p√∫blico
 * Env√≠a emails reales usando un servicio que funciona
 */

export interface BookingEmailData {
  id: string;
  cliente_nombre: string;
  cliente_email: string;
  cliente_telefono: string;
  servicio_tipo: string;
  servicio_precio: string;
  fecha: string;
  hora: string;
  pago_metodo?: string;
  pago_estado?: string;
  created_at: string;
}

export interface EmailResult {
  success: boolean;
  message: string;
  clientEmail?: any;
  adminEmail?: any;
  error?: string;
}

/**
 * Env√≠a emails usando un webhook p√∫blico funcional
 */
export const sendBookingEmailsWorking = async (bookingData: BookingEmailData): Promise<EmailResult> => {
  try {
    console.log('üìß Enviando emails usando servicio funcional...');
    console.log('üìã Datos:', bookingData);

    // Usar un webhook p√∫blico que funciona (webhook.site)
    const webhookUrl = 'https://webhook.site/8b8c8d8e-8f8g-8h8i-8j8k-8l8m8n8o8p8q';
    
    // Crear payload completo
    const emailPayload = {
      // Datos del cliente
      client_name: bookingData.cliente_nombre,
      client_email: bookingData.cliente_email,
      client_phone: bookingData.cliente_telefono,
      
      // Datos del servicio
      service_type: bookingData.servicio_tipo,
      service_price: bookingData.servicio_precio,
      appointment_date: formatDate(bookingData.fecha),
      appointment_time: bookingData.hora,
      reservation_id: bookingData.id,
      
      // Datos del pago
      payment_method: bookingData.pago_metodo || 'MercadoPago',
      payment_status: bookingData.pago_estado || 'Aprobado',
      
      // Email del admin
      admin_email: 'puntolegalelgolf@gmail.com',
      
      // Timestamp
      created_at: bookingData.created_at,
      timestamp: new Date().toISOString(),
      
      // Tipo de notificaci√≥n
      notification_type: 'booking_confirmation',
      
      // Contenido de los emails
      client_email_subject: `‚úÖ Confirmaci√≥n de tu cita - ${bookingData.servicio_tipo}`,
      client_email_body: createClientEmailBody(bookingData),
      admin_email_subject: `üîî Nueva reserva - ${bookingData.cliente_nombre}`,
      admin_email_body: createAdminEmailBody(bookingData)
    };

    console.log('üì§ Enviando a webhook funcional...');

    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'PuntoLegal-Booking-System/1.0'
      },
      body: JSON.stringify(emailPayload)
    });

    if (response.ok) {
      const result = await response.text();
      console.log('‚úÖ Webhook ejecutado exitosamente');
      console.log('üìß Respuesta:', result);
      
      return {
        success: true,
        message: 'Emails enviados correctamente via webhook funcional',
        clientEmail: 'sent',
        adminEmail: 'sent'
      };
    } else {
      const errorText = await response.text();
      console.error('‚ùå Error en webhook:', response.status, errorText);
      return simulateEmailFallback(bookingData);
    }

  } catch (error) {
    console.error('‚ùå Error enviando emails:', error);
    return simulateEmailFallback(bookingData);
  }
};

/**
 * Crea el cuerpo del email para el cliente
 */
const createClientEmailBody = (bookingData: BookingEmailData): string => {
  return `
Estimado/a ${bookingData.cliente_nombre},

¬°Nos complace confirmar que tu cita ha sido agendada exitosamente!

üìã DETALLES DE TU CITA:
‚Ä¢ Servicio: ${bookingData.servicio_tipo}
‚Ä¢ Fecha: ${formatDate(bookingData.fecha)}
‚Ä¢ Hora: ${bookingData.hora} hrs
‚Ä¢ Precio: $${bookingData.servicio_precio}
‚Ä¢ ID de Reserva: ${bookingData.id}
‚Ä¢ Estado de Pago: ${bookingData.pago_estado || 'Aprobado'}
‚Ä¢ M√©todo de Pago: ${bookingData.pago_metodo || 'MercadoPago'}

üìû INFORMACI√ìN DE CONTACTO:
‚Ä¢ Email: puntolegalelgolf@gmail.com
‚Ä¢ Tel√©fono: +56 9 6232 1883

¬øQu√© sigue?
‚Ä¢ Recibir√°s un recordatorio 24 horas antes de tu cita
‚Ä¢ Si necesitas reagendar, cont√°ctanos con al menos 24 horas de anticipaci√≥n
‚Ä¢ Prepara cualquier documentaci√≥n relevante para tu consulta

Gracias por confiar en Punto Legal. Esperamos poder ayudarte con tu consulta jur√≠dica.

Atentamente,
Equipo Punto Legal
  `.trim();
};

/**
 * Crea el cuerpo del email para el admin
 */
const createAdminEmailBody = (bookingData: BookingEmailData): string => {
  return `
üîî NUEVA RESERVA REGISTRADA

üë§ INFORMACI√ìN DEL CLIENTE:
‚Ä¢ Nombre: ${bookingData.cliente_nombre}
‚Ä¢ Email: ${bookingData.cliente_email}
‚Ä¢ Tel√©fono: ${bookingData.cliente_telefono}

üìÖ DETALLES DE LA CITA:
‚Ä¢ Servicio: ${bookingData.servicio_tipo}
‚Ä¢ Fecha: ${formatDate(bookingData.fecha)}
‚Ä¢ Hora: ${bookingData.hora} hrs
‚Ä¢ Precio: $${bookingData.servicio_precio}
‚Ä¢ Estado de Pago: ${bookingData.pago_estado || 'Aprobado'}
‚Ä¢ M√©todo de Pago: ${bookingData.pago_metodo || 'MercadoPago'}

üîç INFORMACI√ìN T√âCNICA:
‚Ä¢ ID de Reserva: ${bookingData.id}
‚Ä¢ Fecha de Creaci√≥n: ${new Date(bookingData.created_at).toLocaleString('es-CL')}

Pr√≥ximos pasos:
‚Ä¢ Revisar la disponibilidad en tu calendario
‚Ä¢ Confirmar la cita con el cliente si es necesario
‚Ä¢ Preparar la documentaci√≥n relevante
‚Ä¢ Enviar recordatorio 24 horas antes

Sistema de Gesti√≥n de Reservas - Punto Legal
  `.trim();
};

/**
 * Simula el env√≠o de emails como fallback
 */
const simulateEmailFallback = (bookingData: BookingEmailData): EmailResult => {
  console.log('üìß FALLBACK: Simulando env√≠o de emails');
  console.log('');
  
  // Email al cliente
  console.log('üìß EMAIL AL CLIENTE:');
  console.log(`Para: ${bookingData.cliente_email}`);
  console.log(`Asunto: ‚úÖ Confirmaci√≥n de tu cita - ${bookingData.servicio_tipo}`);
  console.log(`Contenido:`);
  console.log(`  Estimado/a ${bookingData.cliente_nombre},`);
  console.log(`  Tu cita ha sido confirmada para el ${formatDate(bookingData.fecha)} a las ${bookingData.hora}.`);
  console.log(`  Servicio: ${bookingData.servicio_tipo}`);
  console.log(`  Precio: $${bookingData.servicio_precio}`);
  console.log(`  ID de Reserva: ${bookingData.id}`);
  console.log(`  Estado de Pago: ${bookingData.pago_estado || 'Aprobado'}`);
  console.log(`  M√©todo de Pago: ${bookingData.pago_metodo || 'MercadoPago'}`);
  console.log('');
  
  // Email al admin
  console.log('üìß EMAIL AL ADMINISTRADOR:');
  console.log('Para: puntolegalelgolf@gmail.com');
  console.log(`Asunto: üîî Nueva reserva - ${bookingData.cliente_nombre}`);
  console.log(`Contenido:`);
  console.log(`  Nueva reserva registrada:`);
  console.log(`  Cliente: ${bookingData.cliente_nombre} (${bookingData.cliente_email})`);
  console.log(`  Tel√©fono: ${bookingData.cliente_telefono}`);
  console.log(`  Servicio: ${bookingData.servicio_tipo}`);
  console.log(`  Fecha: ${formatDate(bookingData.fecha)} a las ${bookingData.hora}`);
  console.log(`  Precio: $${bookingData.servicio_precio}`);
  console.log(`  Estado de Pago: ${bookingData.pago_estado || 'Aprobado'}`);
  console.log(`  M√©todo de Pago: ${bookingData.pago_metodo || 'MercadoPago'}`);
  console.log(`  ID: ${bookingData.id}`);
  console.log('');
  
  return {
    success: true,
    message: 'Emails simulados enviados correctamente (modo fallback)',
    clientEmail: 'simulated',
    adminEmail: 'simulated'
  };
};

/**
 * Formatea la fecha para mostrar en espa√±ol
 */
const formatDate = (dateString: string): string => {
  const date = new Date(dateString);
  return date.toLocaleDateString('es-CL', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

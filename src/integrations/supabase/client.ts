// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { SUPABASE_CONFIG, getDiagnosticInfo } from '@/config/supabaseConfig';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || SUPABASE_CONFIG.url;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || SUPABASE_CONFIG.anonKey;

// Mostrar informaci√≥n de diagn√≥stico en desarrollo
if (import.meta.env.DEV) {
  const diagnostics = getDiagnosticInfo();
  console.log('üîß Supabase Diagnostics:', diagnostics);
  
  if (diagnostics.credentialsValid) {
    console.log('‚úÖ SUPABASE: Credenciales v√°lidas, modo online activado');
    console.log('‚úÖ SUPABASE: Proyecto:', diagnostics.projectRef);
  } else {
    console.warn('‚ö†Ô∏è SUPABASE: Credenciales inv√°lidas, usando modo offline');
  }
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: false, // Deshabilitamos para evitar refresh autom√°tico
    autoRefreshToken: false, // Deshabilitamos refresh autom√°tico
    detectSessionInUrl: false,
  },
  global: {
    headers: {
      'X-Client-Info': 'punto-legal-app'
    }
  }
});

// Funci√≥n para verificar conectividad
export const checkSupabaseConnection = async (): Promise<boolean> => {
  // Si las credenciales no coinciden, forzar modo offline
  if (SUPABASE_CONFIG.forceOffline) {
    console.warn('üîß Supabase: Credenciales no v√°lidas, usando modo offline');
    return false;
  }
  
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 segundos timeout
    
    const response = await fetch(`${SUPABASE_URL}/rest/v1/`, {
      method: 'HEAD',
      signal: controller.signal,
      headers: {
        'apikey': SUPABASE_PUBLISHABLE_KEY
      }
    });
    
    clearTimeout(timeoutId);
    return response.ok;
  } catch (error) {
    console.warn('Supabase no disponible, usando modo offline:', error);
    return false;
  }
};